# Meteora Studio - DeFi Pool Experimentation Toolkit

## Repository Overview
This is a comprehensive toolkit for experimenting with and launching DeFi pools on Meteora. The repository contains four main modules, each focused on different types of Meteora pools:

1. **DBC (Dynamic Bonding Curve)** - For token launches and bonding curve mechanics
2. **DAMM V1 (Dynamic AMM V1)** - For creating and managing V1 AMM pools
3. **DAMM V2 (Dynamic AMM V2)** - For creating and managing V2 AMM pools  
4. **DLMM (Dynamic Liquidity Market Maker)** - For concentrated liquidity positions

## Key Technologies & Dependencies
- **Solana Blockchain**: All pools are built on Solana
- **Anchor Framework**: For smart contract interactions
- **TypeScript**: All scripts are written in TypeScript
- **Meteora SDKs**: Each module uses specific Meteora SDKs:
  - `@meteora-ag/dynamic-bonding-curve-sdk` for DBC
  - `@meteora-ag/cp-amm-sdk` for DAMM V2
  - `@meteora-ag/dlmm` for DLMM

## Recommended MCP Servers for DeFi Development

### Blockchain & Solana MCP Servers
- **Solana MCP Server**: For real-time blockchain data, account queries, and transaction monitoring
  - Use for: Checking pool states, verifying transactions, monitoring token balances
  - Commands: `getAccountInfo`, `getTokenAccounts`, `getTransaction`
- **Helius MCP Server**: For enhanced Solana RPC with indexing capabilities
  - Use for: Historical data, enhanced queries, webhook notifications
  - Commands: `getAssetsByGroup`, `getAssetsByOwner`, `searchAssets`
- **Jupiter MCP Server**: For DEX aggregation and swap routing
  - Use for: Finding best swap routes, price comparisons, liquidity analysis
  - Commands: `getQuote`, `getSwapRoutes`, `getTokenList`

### DeFi & Analytics MCP Servers
- **Birdeye MCP Server**: For DeFi analytics and market data
  - Use for: Token price tracking, pool analytics, market trends
  - Commands: `getTokenPrice`, `getPoolData`, `getMarketData`
- **DefiLlama MCP Server**: For comprehensive DeFi protocol data
  - Use for: TVL tracking, protocol comparisons, yield farming data
  - Commands: `getProtocolTVL`, `getYieldData`, `getProtocolData`
- **DexScreener MCP Server**: For real-time DEX data and trading analytics
  - Use for: Price charts, trading volume, liquidity depth analysis
  - Commands: `getPairData`, `getPriceChart`, `getLiquidityData`

### Development & Tooling MCP Servers
- **Anchor MCP Server**: For Solana program development and deployment
  - Use for: Building and deploying smart contracts, program interactions
  - Commands: `buildProgram`, `deployProgram`, `callInstruction`
- **Spl-Token MCP Server**: For SPL token operations and management
  - Use for: Token creation, minting, transfers, metadata management
  - Commands: `createMint`, `mintTo`, `transfer`, `getMetadata`
- **Metaplex MCP Server**: For NFT and metadata operations
  - Use for: NFT creation, metadata management, collection operations
  - Commands: `createNFT`, `updateMetadata`, `getCollectionData`

### Integration Examples
When working with this repository, you can use these MCP servers to:
1. **Validate pool creation**: Use Solana MCP to verify pool accounts after creation
2. **Monitor positions**: Use Birdeye/DexScreener MCP to track position performance
3. **Optimize swaps**: Use Jupiter MCP to find optimal routes for token swaps
4. **Analyze market conditions**: Use DefiLlama MCP to understand broader DeFi trends
5. **Debug transactions**: Use Solana MCP to inspect failed transactions and account states

## Getting Started Workflow
1. **Environment Setup**: Each module has its own `package.json` and dependencies
2. **Configuration**: Most scripts require environment variables (private keys, RPC endpoints)
3. **Execution**: Use `tsx` to run TypeScript files directly
4. **Experimentation**: Start with quickstart scripts, then customize for your needs

## Module-Specific Guidance

### DBC (Dynamic Bonding Curve)
- **Purpose**: Token launches, bonding curve mechanics, token migration
- **Key Scripts**: 
  - `quickstart` - Get started quickly
  - `quicklaunch` - Launch a token with DBC
  - `create-pool` - Create custom DBC pools
  - `swap-buy` - Buy tokens from DBC pools
  - `migrate-to-damm-v1/v2` - Migrate tokens to AMM pools
- **Use Cases**: Token launches, fair launches, bonding curve experiments

### DAMM V1 (Dynamic AMM V1)
- **Purpose**: Traditional AMM pool creation and management
- **Key Features**: Pool creation, position management, fee claiming
- **Use Cases**: Standard AMM pools, liquidity provision

### DAMM V2 (Dynamic AMM V2)
- **Purpose**: Advanced AMM with enhanced features
- **Key Scripts**:
  - `create-pool` - Create new DAMM V2 pools
  - `create-position` - Add liquidity positions
  - `lock-position` - Lock positions for rewards
  - `claim-position-fee` - Claim earned fees
- **Use Cases**: Advanced AMM strategies, fee optimization

### DLMM (Dynamic Liquidity Market Maker)
- **Purpose**: Concentrated liquidity with active market making
- **Key Scripts**:
  - `create-balance-position` - Create balanced liquidity positions
  - `create-imbalance-position` - Create imbalanced positions
  - `add-balanced-liquidity` - Add balanced liquidity
  - `add-imbalanced-liquidity` - Add imbalanced liquidity
- **Use Cases**: Concentrated liquidity, active market making, capital efficiency

## Development Best Practices

### Environment Configuration
- Always use `.env` files for sensitive data (private keys, RPC endpoints)
- Use different RPC endpoints for mainnet vs devnet testing
- Keep private keys secure and never commit them

### Script Customization
- Start with existing scripts as templates
- Modify parameters for your specific use case
- Test on devnet before mainnet deployment
- Use proper error handling and logging

### Pool Strategy Considerations
- **DBC**: Consider bonding curve parameters, initial token distribution
- **DAMM**: Focus on fee tiers, pool initialization parameters
- **DLMM**: Plan bin ranges, liquidity distribution strategy

## Common Development Tasks

### Creating a New Pool
1. Choose the appropriate module (DBC/DAMM/DLMM)
2. Set up environment variables
3. Run the create-pool script
4. Verify pool creation on-chain
5. Test basic operations (swaps, liquidity provision)

### Adding Liquidity
1. Determine the appropriate strategy (balanced/imbalanced)
2. Calculate optimal amounts for your tokens
3. Run the create-position script
4. Monitor position performance

### Managing Positions
1. Track position fees and performance
2. Claim earned fees regularly
3. Consider rebalancing or migrating positions
4. Monitor market conditions for optimal timing

## Troubleshooting Tips
- Check RPC endpoint connectivity
- Verify token mint addresses and decimals
- Ensure sufficient SOL for transaction fees
- Monitor transaction logs for detailed error messages
- Use Solana Explorer to verify on-chain state

## Advanced Features
- **Migration Scripts**: Move tokens between different pool types
- **Simulation Tools**: Test strategies before execution
- **Fee Optimization**: Maximize returns through strategic positioning
- **Multi-Pool Strategies**: Combine different pool types for complex strategies

## Security Considerations
- Always test on devnet first
- Use small amounts for initial testing
- Verify all transaction parameters before signing
- Keep private keys secure and use hardware wallets for mainnet
- Monitor for potential MEV or front-running attacks

## Resources for Further Learning
- Meteora Documentation
- Solana Developer Resources
- Anchor Framework Documentation
- DeFi Pool Strategy Guides

When helping users with this repository, focus on:
1. Understanding their specific DeFi goals
2. Recommending the appropriate pool type
3. Guiding them through the setup process
4. Helping customize scripts for their use case
5. Ensuring security best practices are followed 